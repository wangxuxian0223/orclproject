<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 扫包 -->
	<context:component-scan base-package="org.wxx.ssm">
		<!-- 除了Controller的包不扫 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- =====================================配置数据源===================================== -->
	<!-- 扫描properties文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${oracle.jdbcUrl}"></property>
		<property name="driverClass" value="${oracle.driverClass}"></property>
		<property name="user" value="${oracle.user}"></property>
		<property name="password" value="${oracle.password}"></property>
	</bean>
	<!-- ======================================================================================= -->
	
	<!-- =====================================配置和Mybatis整合============================================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定Mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatisconfig.xml"></property>
		<!-- 指定数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有的dao接口实现，加入到IOC容器中 -->
		<property name="basePackage" value="org.wxx.ssm.orclproject.dao"></property>
	</bean>
	
	<!-- 配置一个可以执行批量操作的sqlSession -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- ======================================================================================= -->
	
	
	<!-- ==================================事务控制======================================== -->
	<!-- 1.配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<!-- 可以是扫描注解来配置事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<!-- 也可以是基于xml配置的事务 -->
	<!-- 2.配置事务的属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="buyBook" propagation="REQUIRES_NEW" isolation="DEFAULT" timeout="5000"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3.配置事务的切入点，以及把事务切入点和事务属性关联起来 -->
	<aop:config>
		<!-- 配置事务切入点表达式 -->
		<aop:pointcut expression="execution(* org.wxx.ssm.orclproject.service.*.*(..))" id="txPointCut"/>
		<!-- 把切入点和事务属性关联起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	<!-- ============================================================================ -->
</beans>

